name: {{.project_name}} CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  quality-checks:
    name: Code Quality & Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: {{.python_version}}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m pytest tests/ --cov=src/ --cov-report=xml

  {{- if .include_dev_env }}
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          echo "$HOME/.databricks/bin" >> $GITHUB_PATH

      - name: Deploy bundle
        run: |
          databricks bundle deploy --target dev --force-lock
        env:
          {{- if eq .cloud_provider "azure" }}
          DATABRICKS_HOST: ${DATABRICKS_HOST_DEV}
          DATABRICKS_CLIENT_ID: ${DATABRICKS_CLIENT_ID_DEV}
          DATABRICKS_CLIENT_SECRET: ${DATABRICKS_CLIENT_SECRET_DEV}
          {{- else if eq .cloud_provider "aws" }}
          DATABRICKS_HOST: ${DATABRICKS_HOST_DEV}
          DATABRICKS_TOKEN: ${DATABRICKS_TOKEN_DEV}
          {{- end }}
  {{- end }}

  {{- if .include_staging_env }}
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          echo "$HOME/.databricks/bin" >> $GITHUB_PATH

      - name: Deploy bundle
        run: |
          databricks bundle deploy --target staging --force-lock
        env:
          {{- if eq .cloud_provider "azure" }}
          DATABRICKS_HOST: ${DATABRICKS_HOST_STAGING}
          DATABRICKS_CLIENT_ID: ${DATABRICKS_CLIENT_ID_STAGING}
          DATABRICKS_CLIENT_SECRET: ${DATABRICKS_CLIENT_SECRET_STAGING}
          {{- else if eq .cloud_provider "aws" }}
          DATABRICKS_HOST: ${DATABRICKS_HOST_STAGING}
          DATABRICKS_TOKEN: ${DATABRICKS_TOKEN_STAGING}
          {{- end }}
  {{- end }}

  {{- if .include_prod_env }}
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          echo "$HOME/.databricks/bin" >> $GITHUB_PATH

      - name: Deploy bundle
        run: |
          databricks bundle deploy --target prod --force-lock
        env:
          {{- if eq .cloud_provider "azure" }}
          DATABRICKS_HOST: ${DATABRICKS_HOST_PROD}
          DATABRICKS_CLIENT_ID: ${DATABRICKS_CLIENT_ID_PROD}
          DATABRICKS_CLIENT_SECRET: ${DATABRICKS_CLIENT_SECRET_PROD}
          {{- else if eq .cloud_provider "aws" }}
          DATABRICKS_HOST: ${DATABRICKS_HOST_PROD}
          DATABRICKS_TOKEN: ${DATABRICKS_TOKEN_PROD}
          {{- end }}
  {{- end }}